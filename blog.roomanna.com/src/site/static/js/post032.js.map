{"version":3,"names":[],"mappings":"","sources":["post032.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nrequire(['jquery', 'seedrandom', 'common-demo'], function ($, seedrandom, Demo) {\n\n  function initClusters(rng, imgData, k) {\n    var i,\n        clusters = [],\n        increment = Math.floor(256 / k),\n        numPixels = Math.floor(imgData.length / 4),\n        offset;\n    for (i = 0; i < k; i++) {\n      offset = Math.floor(rng() * numPixels) * 4;\n      clusters.push({\n        center: [imgData[offset], imgData[offset + 1], imgData[offset + 2]],\n        sum: [0, 0, 0],\n        count: 0,\n        valid: false\n      });\n    }\n    return clusters;\n  }\n\n  function distance(a, b) {\n    var dx = a[0] - b[0],\n        dy = a[1] - b[1],\n        dz = a[2] - b[2];\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  function findBestCluster(clusters, pt) {\n    var i,\n        dist,\n        bestCluster = 0,\n        bestDist = Number.MAX_VALUE;\n    for (i = 0; i < clusters.length; i++) {\n      dist = distance(clusters[i].center, pt);\n      if (dist < bestDist) {\n        bestDist = dist;\n        bestCluster = i;\n      }\n    }\n    return bestCluster;\n  }\n\n  function addToCluster(cluster, pt) {\n    cluster.sum[0] += pt[0];\n    cluster.sum[1] += pt[1];\n    cluster.sum[2] += pt[2];\n    cluster.count++;\n  }\n\n  function updateCenters(rng, clusters) {\n    var i,\n        c,\n        distanceMoved = 0,\n        newCenter;\n    for (i = 0; i < clusters.length; i++) {\n      c = clusters[i];\n      if (c.count > 0) {\n        newCenter = [Math.round(c.sum[0] / c.count), Math.round(c.sum[1] / c.count), Math.round(c.sum[2] / c.count)];\n        c.valid = true;\n      } else {\n        newCenter = [Math.floor(rng() * 256), Math.floor(rng() * 256), Math.floor(rng() * 256)];\n        c.valid = false;\n      }\n      distanceMoved += distance(c.center, newCenter);\n      c.center = newCenter;\n      c.sum = [0, 0, 0];\n      c.count = 0;\n    }\n    return distanceMoved;\n  }\n\n  function kMeans(rng, imgData, k, thresh, maxiter) {\n    var i,\n        pt,\n        clusters,\n        best,\n        iterations = 0,\n        distanceMoved = Number.MAX_VALUE;\n    clusters = initClusters(rng, imgData, k);\n    while (distanceMoved > thresh && iterations < maxiter) {\n      for (i = 0; i < imgData.length; i += 4) {\n        pt = [imgData[i], imgData[i + 1], imgData[i + 2]];\n        best = findBestCluster(clusters, pt);\n        addToCluster(clusters[best], pt);\n      }\n      distanceMoved = updateCenters(rng, clusters);\n      iterations++;\n    }\n    return clusters;\n  }\n\n  function sortClusters(clusters) {\n    function appx(v, thresh) {\n      return Math.round(thresh * v);\n    }\n\n    clusters.sort(function (a, b) {\n      var A = getHSL(a.center[0], a.center[1], a.center[2]),\n          B = getHSL(b.center[0], b.center[1], b.center[2]);\n      if (Math.abs(A[0] - B[0]) > 30) {\n        return A[0] - B[0]; // Hue\n      }\n      if (Math.abs(A[2] - B[2]) > 0.0) {\n        return A[2] - B[2]; // Lightness\n      }\n      return A[1] - B[1]; // Saturation\n    });\n  }\n\n  function getHSL(r, g, b) {\n    var R = r / 255,\n        G = g / 255,\n        B = b / 255,\n        min = Math.min(R, G, B),\n        max = Math.max(R, G, B),\n        delta = max - min,\n        H,\n        S,\n        L;\n\n    if (delta === 0) {\n      H = 0;\n    } else if (max === R) {\n      H = 60 * ((G - B) / delta % 6);\n    } else if (max === G) {\n      H = 60 * ((B - R) / delta + 2);\n    } else {\n      H = 60 * ((R - G) / delta + 4);\n    }\n    if (H < 0) {\n      H += 360;\n    }\n\n    L = (max + min) / 2;\n\n    if (delta === 0) {\n      S = 0;\n    } else {\n      S = delta / (1 - Math.abs(2 * L - 1));\n    }\n\n    return [H, S, L];\n  }\n\n  function processImage(img, state) {\n    var canvas,\n        ctx,\n        ctxData,\n        imgData,\n        clusters,\n        rng,\n        $img,\n        seed = state.seed.toString() || \"1\",\n        k = state.k || 16;\n\n    rng = seedrandom(seed);\n    $img = $(img);\n    canvas = document.createElement('canvas');\n    canvas.width = $img.width() / 2.0;\n    canvas.height = $img.height() / 2.0;\n    //$(document.body).append(canvas);\n    ctx = canvas.getContext('2d');\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n    ctxData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    imgData = ctxData.data;\n    clusters = kMeans(rng, imgData, k, 0.1, 5);\n    sortClusters(clusters);\n    renderClusters(clusters, $(img).siblings('.Palettes'), $img);\n  }\n\n  function renderCluster(cluster, $root, width) {\n    var c = cluster.center,\n        $div = $('<div class=\"Cluster\"></div>');\n    $div.css('background', 'rgb(' + c[0] + ',' + c[1] + ',' + c[2] + ')');\n    $div.css('width', width + 'px');\n    $root.append($div);\n  }\n\n  function renderClusters(clusters, $root, $img) {\n    var i, validClusters, clusterWidth;\n    $div = $('<div class=\"Clusters\"></div>');\n    $root.append($div);\n    console.log('renderClusters', $root);\n    validClusters = $.grep(clusters, function (c) {\n      return c.valid && !isNaN(c.center[0] + c.center[1] + c.center[2]);\n    });\n    clusterWidth = Math.floor($img.width() / validClusters.length * 10) / 10;\n    for (i = 0; i < validClusters.length; i++) {\n      renderCluster(validClusters[i], $div, clusterWidth);\n    }\n  }\n\n  function process(demo) {\n    $('.analyze').each(function (i, img) {\n      if (img.complete) {\n        //console.log('loaded', img.src);\n        processImage(img, demo.state);\n      } else {\n        //console.log('adding onload', img.src);\n        $(img).load(function () {\n          processImage(this, demo.state);\n        });\n      }\n    });\n  }\n\n  var demo = new Demo(document.body);\n  demo.addListener(process);\n  demo.setState({\n    'seed': 1,\n    'k': 16\n  });\n});\n\n},{}]},{},[1]);\n"],"file":"post032.js"}